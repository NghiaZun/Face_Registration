/****************************************************************************
*   Generated by ACUITY 6.30.0
*   Match ovxlib 1.1.53
*
*   Neural Network appliction post-process source file
****************************************************************************/
/*-------------------------------------------
                Includes
-------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "vsi_nn_pub.h"

#include "vnn_global.h"
#include "vnn_post_process.h"

#define _BASETSD_H

/*-------------------------------------------
                  Variable definitions
-------------------------------------------*/

/*{graph_output_idx, postprocess}*/
const static vsi_nn_postprocess_map_element_t* postprocess_map = NULL;


/*-------------------------------------------
                  Functions
-------------------------------------------*/
float* get_output_probabilities_1SE(vsi_nn_graph_t *graph, vsi_nn_tensor_t *tensor, vsi_size_t* out_size);
void softmax(const float* input, float* output, vsi_size_t len);

static void save_output_data(vsi_nn_graph_t *graph)
{
    uint32_t i;
#define _DUMP_FILE_LENGTH 1028
#define _DUMP_SHAPE_LENGTH 128
    char filename[_DUMP_FILE_LENGTH] = {0}, shape[_DUMP_SHAPE_LENGTH] = {0};
    vsi_nn_tensor_t *tensor;

    for(i = 0; i < graph->output.num; i++)
    {
        tensor = vsi_nn_GetTensor(graph, graph->output.tensors[i]);
        vsi_nn_ShapeToString( tensor->attr.size, tensor->attr.dim_num,
            shape, _DUMP_SHAPE_LENGTH, FALSE );
        snprintf( filename, _DUMP_FILE_LENGTH, "output%u_%s.txt", i, shape );
        {
            char *p = NULL;
            p = getenv( "VSI_SAVE_FILE_TYPE" );
            if( ( p == NULL ) || ( *p == '0' ) )
            {
                vsi_nn_SaveTensorToTextByFp32( graph, tensor, filename, NULL );
            }
            else if( *p == '1' )
            {
                vsi_nn_SaveTensorToText( graph, tensor, filename, NULL );
            }
            else if( *p == '2' )
            {
                snprintf( filename, _DUMP_FILE_LENGTH, "output%u_%s.dat", i, shape );
                vsi_nn_SaveTensorToBinary( graph, tensor, filename );
            }
            else if(*p == '3')
            {
                vsi_nn_SaveTensorToTextByFp32(graph, tensor, filename, NULL);
                snprintf(filename, _DUMP_FILE_LENGTH, "output%u_%s.dat", i, shape);
                vsi_nn_SaveTensorToBinary(graph, tensor, filename);
            }
            else
            {
                vsi_nn_SaveTensorToTextByFp32( graph, tensor, filename, NULL );
            }
        }

    }
}

static vsi_bool get_top
    (
    float *pfProb,
    float *pfMaxProb,
    vsi_size_t *pMaxClass,
    vsi_size_t outputCount,
    vsi_size_t topNum
    )
{
    vsi_size_t i, j, k;

    #define MAX_TOP_NUM 20
    if (topNum > MAX_TOP_NUM) return FALSE;

    memset(pfMaxProb, 0xfe, sizeof(float) * topNum);
    memset(pMaxClass, 0xff, sizeof(vsi_size_t) * topNum);

    for (j = 0; j < topNum; j++)
    {
        for (i=0; i<outputCount; i++)
        {
            for (k=0; k < topNum; k ++)
            {
                if(i == pMaxClass[k])
                    break;
            }

            if (k != topNum)
                continue;

            if (pfProb[i] > *(pfMaxProb+j))
            {
                *(pfMaxProb+j) = pfProb[i];
                *(pMaxClass+j) = i;
            }
        }
    }

    return TRUE;
}

static vsi_status show_top5
    (
    vsi_nn_graph_t *graph,
    vsi_nn_tensor_t *tensor
    )
{
    vsi_status status = VSI_FAILURE;
    vsi_size_t i,sz,stride;
    float *buffer = NULL;
    uint8_t *tensor_data = NULL;
    vsi_size_t MaxClass[5];
    float fMaxProb[5];
    vsi_size_t topk = 5;

    sz = 1;
    for(i = 0; i < tensor->attr.dim_num; i++)
    {
        sz *= tensor->attr.size[i];
    }

    if(topk > sz)
        topk = sz;

    stride = (vsi_size_t)vsi_nn_TypeGetBytes(tensor->attr.dtype.vx_type);
    if(stride == 0)
    {
        stride = 1;
    }
    tensor_data = (uint8_t *)vsi_nn_ConvertTensorToData(graph, tensor);
    buffer = (float *)malloc(sizeof(float) * sz);

    for(i = 0; i < sz; i++)
    {
        status = vsi_nn_DtypeToFloat32(&tensor_data[stride * i], &buffer[i], &tensor->attr.dtype);
    }

    if (!get_top(buffer, fMaxProb, MaxClass, sz, topk))
    {
        printf("Fail to show result.\n");
        goto final;
    }

    printf(" --- Top%d ---\n", topk);
    for(i = 0; i< topk; i++)
    {
        printf("%3d: %8.6f\n", MaxClass[i], fMaxProb[i]);
    }
    status = VSI_SUCCESS;

final:
    if(tensor_data)vsi_nn_Free(tensor_data);
    if(buffer)free(buffer);
    return status;
}

vsi_status vnn_PostProcessMinifasnetv1se
    (
    vsi_nn_graph_t *graph
    )
{
    vsi_status status = VSI_FAILURE;
    vsi_nn_tensor_t *tensor;
    float *data = NULL;
    float *probs = NULL;
    vsi_size_t sz = 1, i;

    printf("[%s()]::[%d] \n", __FUNCTION__, __LINE__);

    /* Show the top5 result */
    //status = show_top5(graph, vsi_nn_GetTensor(graph, graph->output.tensors[0]));
    //TEST_CHECK_STATUS(status, final);

    /* Save all output tensor data to txt file */
    //save_output_data(graph);

    // 1. Lấy output tensor đầu tiên
    tensor = vsi_nn_GetTensor(graph, graph->output.tensors[0]);
    if (!tensor) {
        printf("Cannot get output tensor!\n");
        goto final;
    }

    // 2. Lấy số lượng phần tử output
    for(i = 0; i < tensor->attr.dim_num; i++)
    {
        sz *= tensor->attr.size[i];
    }

    // 3. Lấy dữ liệu float32 từ tensor
    data = get_output_probabilities_1SE(graph, tensor, &sz);
    if (!data) {
        printf("Cannot get output data!\n");
        goto final;
    }

    // 4. Tính softmax
    probs = (float*)malloc(sizeof(float) * sz);
    if (!probs) goto final;
    softmax(data, probs, sz);

    // 5. In ra list xác suất
    printf("Softmax output:\n");
    for(i = 0; i < sz; ++i)
    {
        printf("  [%u]: %f\n", i, probs[i]);
    }

    status = VSI_SUCCESS;

final:
    if(data) free(data);
    if(probs) free(probs);
    return status;
}

const vsi_nn_postprocess_map_element_t * vnn_GetPostProcessMap()
{
    return postprocess_map;
}

uint32_t vnn_GetPostProcessMapCount()
{
    if (postprocess_map == NULL)
       return 0;
    else
        return sizeof(postprocess_map) / sizeof(vsi_nn_postprocess_map_element_t);
}

void softmax(const float* input, float* output, vsi_size_t len)
{
    float max_val = input[0];
    for (vsi_size_t i = 1; i < len; ++i)
        if (input[i] > max_val) max_val = input[i];

    float sum = 0.0f;
    for (vsi_size_t i = 0; i < len; ++i)
    {
        output[i] = expf(input[i] - max_val);
        sum += output[i];
    }
    for (vsi_size_t i = 0; i < len; ++i)
    {
        output[i] /= sum;
    }
}

float* get_output_probabilities_1SE(vsi_nn_graph_t *graph, vsi_nn_tensor_t *tensor, vsi_size_t* out_size)
{
    vsi_size_t i, sz, stride;
    float *buffer = NULL;
    uint8_t *tensor_data = NULL;

    sz = 1;
    for(i = 0; i < tensor->attr.dim_num; i++)
    {
        sz *= tensor->attr.size[i];
    }
    *out_size = sz;

    stride = (vsi_size_t)vsi_nn_TypeGetBytes(tensor->attr.dtype.vx_type);
    if(stride == 0)
    {
        stride = 1;
    }
    tensor_data = (uint8_t *)vsi_nn_ConvertTensorToData(graph, tensor);
    buffer = (float *)malloc(sizeof(float) * sz);

    for(i = 0; i < sz; i++)
    {
        vsi_nn_DtypeToFloat32(&tensor_data[stride * i], &buffer[i], &tensor->attr.dtype);
    }

    if(tensor_data) vsi_nn_Free(tensor_data);
    return buffer; // bạn phải free(buffer) ở bước sau khi dùng xong
}